C语言最终操作对象就是内存

指针：
	内存资源的地址，门牌号的代名词！
指针变量：
	存放指针这个概念的盒子

C语言编译器对指针这个特殊的概念，有两个疑问
 1、分配一个盒子，盒子要多大？
	在32位系统中，指针就4个字节
 2、盒子里存放的地址，所指向内存的读取方法是什么？
	指针指向内存空间、一定保证合法性！

const 常量【不能变】

const char *p; 【T】    字符串 “Hello world”
char const *p;

char * const p; 【T】   硬件资源   LCD
char * p const;

修饰谁谁不变

const char * const p;   rom

volatile
防止优化指向内存地址
char * p;
volatile char *p;
*p == 0x10
 
char * name_t;           name_t是一个指针，指向了一个char类型的内存
typedef char * name_t;   name_t是一个指针类型的名称，指向char类型的内存

指针运算符：
int *p = xxx [0x12]

P+1     [0x12 + 1*(sizeof(*p))]

指针的加法、减法运算，实际上是加一个单位，单位的大小可以使用sizeof(p[0])

int *p p+1;
char *p p+1;

p++ p--

[]
变量名[n]

n:ID 标签
地址内容的标签访问方式

指针逻辑操作符：
== ！=
1、给以特殊值进行比较 0x0:地址的无效值，结束标志
	if(p == 0x0) NULL
2、指针必须是同类型的比较才有意义
	char * int *

多级指针

int **p;
存放地址的地址的空间
char **p;

二维数组其实只是一个指针，而二级指针是指向指针的指针，所以二者并不等价。如上例所示：int a[2][2];

 a是指向整个数组的首地址,并不是int **;所以不要指望向函数fun里面传实参 p=a;

 数组的定义以及初始化
 定义一个空间：
 1、大小
 2、读取方式
 数组名[] m的作用域是在申请的时候
	数组名是一个常量符号，一定不要放到=的左边

空间的赋值
	按照标签逐一处理
数组空间的初始化和变量的初始化本质不同，尤其在嵌入式的裸机开发中，空间的初始化往往需要库函数的辅助
char buf[10] = {'a','b','c'};
buf当成字符串来看，最后加上'\0'
字符串的重要属性，结尾一定有个'\0'

char * p = "hello";
p[2] = 'A';  //Error

一块空间，当成字符空间，提供了一套字符拷贝函数

字符拷贝函数的原则：
	内存空间和内存空间的逐一赋值的功能的一个封装体
	一旦空间中出现了0这个特殊值，函数就即将结束

字符空间
	ASCII码来解码的空间----------->给人看的
	%s
	\0
非字符空间
	数据采集 0x00 - 0xff 8bit
	开辟一个储存这些数据的盒子
	char buf[10]; ------->string
	unsigned char buf[10];----------->data
strcpy
只管逐一拷贝，结束在哪里？只能定义个数
拷贝三要素：
 1、src
 2、dest
 3、个数
memcpy()

int buf[10];
int sensor_buf[100];

memcpy(buf,sensor_buf,10*sizeof(unsigned char));

unsigned char buf1[10];

指针数组
char * a[100];


int a[10];          int a[5][6];
int *p;             int (*p)[6];

字节对齐
效率，希望牺牲一点空间换取时间的效率
最终结构体的大小一定是4的倍数
结构体里成员变量的顺序不一致，也影响结构体的大小


内存分布图
	栈空间      运行时，函数内部使用的变量，函数一旦返回就释放
	堆空间      运行时，可以自由，自我管理的分配和释放的空间，生存周期是由程序员来决定
	只读空间    静态空间，整个程序结束时释放内存，生存周期最长

分配：
	malloc(),一旦成功，返回分配好的地址给我们，只需要接受，对于这个新地址的读法有程序员灵活把握
	输入参数指定分配大小，单位就是B
	
	char * p;
	p = (char *)malloc(100);
	
	
--------------------------------------------
	内核空间  应用程序不可访问
------------------     3G
	栈空间   局部变量
	运行时的
------------------
	运行时的堆空间  malloc
	
------------------
	全局的数据空间  (初始化的，未初始化)    static RW
	只读数据段      ”hello world“ 字符串常量 R
	代码段          code                 R
--------------------------------------------

size  strings nm
























	
	
	
	
	
	
	
	
	
	
	
	
	