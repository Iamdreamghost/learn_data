函数
一堆代码的集合，用一个标签去描述它
复用化

标签 ----------- 函数名

函数_数组，函数具有3要素：
	int *p;
	int a[100];
	
	1、函数名    （地址）
	2、输入参数
	3、返回值
	
在定义函数时，必须将3要素告知编译器。
	int fun(int ,int ,char)
	{
		xxxx;
	}

如何用指针保存函数那？
	char *p;
	char (*p)[10];
	int  (*p)(int,int,char);

定义函数，调用函数

int fun(int a,char b)
{
	xxxx;
}
eg：
	#include<stdio.h>

	void f1()
	{
			printf("1\n");
	}
	void f2()
	{
			printf("2\n");
	}

	int main()
	{
			void (*pf[2])();
			pf[0] = f1;
			pf[1] = f2;
			pf[0]();
			pf[1]();
			printf("%p,%p,%p,%p\n",pf[0],pf[1],f1,f2);
			return 0;
	}


承上启下的功能：
调用者：
	函数名（要传递的数据）         //实参
被调用者：
	函数的具体实现
	

值传递
	上调用者，保护自己空间值不被修改的能力
地址传递 
	上层调用者，让下层 子函数 修改自己空间值的方法
	应用：连续空间的传递
	 
连续空间的传递：
1、数组
	数组名---标签
	实参：
		int abc[10];
		fun(abc)
	形参：
		void fun(int * p)
2、结构体
	结构体变量
	struct abc{int a;int b;int c;};
	struct abc buf;
	实参：
	fun(buf); fun(&buf);
	形参：
	void fun(struct abc a1)   void fun(struct abc *a2)
	
地址传递：
1、修改 int * char * ...
2、空间传递
	2.1 子函数看看空间里的情况
	2.2 子函数反向修改上层空间里的内容

连续空间的传递：
	空间：空间首地址、结束标志
	结束标志：内存里面存放了0x00(1B),字符空间
	非字符空间0x00,不能当成结束标志 结束标志：数量
	void *:数据空间的标示符
	大小
	
函数返回类型
	基本数据
	指针类型
	连续空间


修饰符的使用总结：
	关键字static的作用？
	1、修饰局部变量
		默认局部变量在栈空间存在，生存期比较短局部静态化，局部变量在静态数据段保存，生存期非常长
	2、修饰全局变量
		防止重命名
	3、修饰全局函数
		防止重命名
关键字const有什么含义？
	C:只读，建议性 不具备强制性
	const int a = 100;
	c++: 常量 
关键字volatile有什么含义？并给出三个不同的例子。

































